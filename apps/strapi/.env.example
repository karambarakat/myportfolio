HOST=0.0.0.0 
PORT=1337
APP_KEYS=toBeModified1,toBeModified2 # scope=RUN_TIME,type=SECRET
API_TOKEN_SALT=tobemodified # scope=RUN_TIME,type=SECRET
ADMIN_JWT_SECRET=tobemodified # scope=RUN_TIME,type=SECRET
JWT_SECRET=tobemodified # scope=RUN_TIME,type=SECRET

######################################## next-js revalidation webhook
Strapi_Next_Webhook_Token=tobemodified # scope=RUN_TIME,type=SECRET

######################################## aws bucket 

AWS_ACCESS_KEY_ID= toBeModified # scope=RUN_TIME,type=SECRET
AWS_ACCESS_SECRET= toBeModified # scope=RUN_TIME,type=SECRET
AWS_REGION= toBeModified # scope=RUN_TIME,type=GENERAL
AWS_BUCKET= toBeModified # scope=RUN_TIME,type=GENERAL

SAVE_URLs=*.amazonaws.com # scope=RUN_TIME,type=GENERAL

######################################## database: local sqlite
DATABASE_CLIENT=sqlite
DATABASE_FILENAME=.tmp/data.db

######################################## database: incase of docker compose postgres
# DATABASE_CLIENT=postgres
# DATABASE_HOST=127.0.0.1
# DATABASE_PORT=5432
# DATABASE_NAME=strapi
# DATABASE_USERNAME=post-admin
# DATABASE_PASSWORD= #tobemodified
# DATABASE_SSL=false

## in some cases of docker compose I have to provide the following env variables
# POSTGRES_USER=${DATABASE_USERNAME}
# POSTGRES_PASSWORD=${DATABASE_PASSWORD}
# POSTGRES_DB=${DATABASE_NAME}

######################################## database: digital ocean
# DATABASE_CLIENT=postgres # scope=RUN_TIME,type=GENERAL
# DATABASE_URL=postgres://user:password@host:port/database # scope=RUN_TIME,type=SECRET