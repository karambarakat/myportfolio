"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

type About {
  blocks: [AboutBlocksDynamicZone]
  createdAt: DateTime
  locale: String
  localizations(publicationState: PublicationState = LIVE): AboutRelationResponseCollection
  publishedAt: DateTime
  title: String!
  updatedAt: DateTime
}

union AboutBlocksDynamicZone = ComponentUiQuote | ComponentUiSlider | ComponentPlaceholderRichText | ComponentPlaceholderMultiMedia | Error

scalar AboutBlocksDynamicZoneInput

type AboutEntity {
  attributes: About
  id: ID
}

type AboutEntityResponse {
  data: AboutEntity
}

input AboutInput {
  blocks: [AboutBlocksDynamicZoneInput!]
  publishedAt: DateTime
  title: String
}

type AboutRelationResponseCollection {
  data: [AboutEntity!]!
}

input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

type ComponentKennPageSelectedProjectDetails {
  body: String!
  callOfAction(filters: ComponentUiButtonFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentUiButton]
  heading: String!
  id: ID!
  type: ENUM_COMPONENTKENNPAGESELECTEDPROJECTDETAILS_TYPE!
}

type ComponentPlaceholderMultiMedia {
  id: ID!
  media(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
}

type ComponentPlaceholderRichText {
  id: ID!
  richText: String
}

type ComponentSharedSeo {
  description: String!
  id: ID!
  image: UploadFileEntityResponse
  title: String!
}

input ComponentSharedSeoInput {
  description: String
  id: ID
  image: ID
  title: String
}

type ComponentUiButton {
  external: Boolean!
  href: String
  id: ID!
  text: String
}

input ComponentUiButtonFiltersInput {
  and: [ComponentUiButtonFiltersInput]
  external: BooleanFilterInput
  href: StringFilterInput
  not: ComponentUiButtonFiltersInput
  or: [ComponentUiButtonFiltersInput]
  text: StringFilterInput
}

input ComponentUiButtonInput {
  external: Boolean
  href: String
  id: ID
  text: String
}

type ComponentUiQuote {
  body: String
  id: ID!
  title: String
}

type ComponentUiSlider {
  id: ID!
  images(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

enum ENUM_COMPONENTKENNPAGESELECTEDPROJECTDETAILS_TYPE {
  MERN_Stack
  User_Experience_in_mind
  Modern_UI
  Good_Code_Quality
  Storybooks
  Robust_DevOps
}

enum ENUM_GETINCONTACT_FRONTENDDISPLAY {
  linkedin
  github
  freelancer
  email
  phone
  other
}

type Error {
  code: String!
  message: String
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

union GenericMorph = ComponentKennPageSelectedProjectDetails | ComponentPlaceholderMultiMedia | ComponentPlaceholderRichText | ComponentSharedSeo | ComponentUiButton | ComponentUiQuote | ComponentUiSlider | UploadFile | UploadFolder | I18NLocale | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser | About | GetInContact | Global | HeroSection | MypocketDisplay | Project | Skill

type GetInContact {
  createdAt: DateTime
  frontendDisplay: ENUM_GETINCONTACT_FRONTENDDISPLAY!
  frontendDisplayPicture: UploadFileEntityResponse
  links(filters: ComponentUiButtonFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentUiButton]
  locale: String
  localizations(publicationState: PublicationState = LIVE): GetInContactRelationResponseCollection
  message: String!
  publishedAt: DateTime
  updatedAt: DateTime
}

type GetInContactEntity {
  attributes: GetInContact
  id: ID
}

type GetInContactEntityResponse {
  data: GetInContactEntity
}

input GetInContactInput {
  frontendDisplay: ENUM_GETINCONTACT_FRONTENDDISPLAY
  frontendDisplayPicture: ID
  links: [ComponentUiButtonInput]
  message: String
  publishedAt: DateTime
}

type GetInContactRelationResponseCollection {
  data: [GetInContactEntity!]!
}

type Global {
  createdAt: DateTime
  defaultSeo: ComponentSharedSeo
  favicon: UploadFileEntityResponse
  locale: String
  localizations: GlobalRelationResponseCollection
  siteAbout: String!
  siteName: String!
  updatedAt: DateTime
}

type GlobalEntity {
  attributes: Global
  id: ID
}

type GlobalEntityResponse {
  data: GlobalEntity
}

input GlobalInput {
  defaultSeo: ComponentSharedSeoInput
  favicon: ID
  siteAbout: String
  siteName: String
}

type GlobalRelationResponseCollection {
  data: [GlobalEntity!]!
}

type HeroSection {
  aboutMe: String!
  callToAction(filters: ComponentUiButtonFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentUiButton]
  createdAt: DateTime
  h1: String!
  h2: String!
  locale: String
  localizations: HeroSectionRelationResponseCollection
  picture: UploadFileEntityResponse!
  updatedAt: DateTime
}

type HeroSectionEntity {
  attributes: HeroSection
  id: ID
}

type HeroSectionEntityResponse {
  data: HeroSectionEntity
}

input HeroSectionInput {
  aboutMe: String
  callToAction: [ComponentUiButtonInput]
  h1: String
  h2: String
  picture: ID
}

type HeroSectionRelationResponseCollection {
  data: [HeroSectionEntity!]!
}

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

"""A string used to identify an i18n locale"""
scalar I18NLocaleCode

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

type Mutation {
  """Change user password. Confirm with the current password."""
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  createAboutLocalization(data: AboutInput, id: ID, locale: I18NLocaleCode): AboutEntityResponse
  createGetInContactLocalization(data: GetInContactInput, id: ID, locale: I18NLocaleCode): GetInContactEntityResponse
  createGlobalLocalization(data: GlobalInput, id: ID, locale: I18NLocaleCode): GlobalEntityResponse
  createHeroSectionLocalization(data: HeroSectionInput, id: ID, locale: I18NLocaleCode): HeroSectionEntityResponse
  createMypocketDisplayLocalization(data: MypocketDisplayInput, id: ID, locale: I18NLocaleCode): MypocketDisplayEntityResponse
  createProject(data: ProjectInput!, locale: I18NLocaleCode): ProjectEntityResponse
  createProjectLocalization(data: ProjectInput, id: ID, locale: I18NLocaleCode): ProjectEntityResponse
  createSkill(data: SkillInput!): SkillEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse

  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  deleteAbout(locale: I18NLocaleCode): AboutEntityResponse
  deleteGetInContact(locale: I18NLocaleCode): GetInContactEntityResponse
  deleteGlobal(locale: I18NLocaleCode): GlobalEntityResponse
  deleteHeroSection(locale: I18NLocaleCode): HeroSectionEntityResponse
  deleteMypocketDisplay(locale: I18NLocaleCode): MypocketDisplayEntityResponse
  deleteProject(id: ID!, locale: I18NLocaleCode): ProjectEntityResponse
  deleteSkill(id: ID!): SkillEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse

  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """Delete an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!

  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload

  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!

  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateAbout(data: AboutInput!, locale: I18NLocaleCode): AboutEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateGetInContact(data: GetInContactInput!, locale: I18NLocaleCode): GetInContactEntityResponse
  updateGlobal(data: GlobalInput!, locale: I18NLocaleCode): GlobalEntityResponse
  updateHeroSection(data: HeroSectionInput!, locale: I18NLocaleCode): HeroSectionEntityResponse
  updateMypocketDisplay(data: MypocketDisplayInput!, locale: I18NLocaleCode): MypocketDisplayEntityResponse
  updateProject(data: ProjectInput!, id: ID!, locale: I18NLocaleCode): ProjectEntityResponse
  updateSkill(data: SkillInput!, id: ID!): SkillEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse

  """Update an existing role"""
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload

  """Update an existing user"""
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type MypocketDisplay {
  content: [MypocketDisplayContentDynamicZone]!
  createdAt: DateTime
  locale: String
  localizations(publicationState: PublicationState = LIVE): MypocketDisplayRelationResponseCollection
  publishedAt: DateTime
  updatedAt: DateTime
}

union MypocketDisplayContentDynamicZone = ComponentKennPageSelectedProjectDetails | Error

scalar MypocketDisplayContentDynamicZoneInput

type MypocketDisplayEntity {
  attributes: MypocketDisplay
  id: ID
}

type MypocketDisplayEntityResponse {
  data: MypocketDisplayEntity
}

input MypocketDisplayInput {
  content: [MypocketDisplayContentDynamicZoneInput!]
  publishedAt: DateTime
}

type MypocketDisplayRelationResponseCollection {
  data: [MypocketDisplayEntity!]!
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

type Project {
  content: String!
  createdAt: DateTime
  displayPicture: UploadFileEntityResponse
  github: ComponentUiButton
  live: ComponentUiButton
  locale: String
  localizations(filters: ProjectFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ProjectRelationResponseCollection
  publishedAt: DateTime
  skills(filters: SkillFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): SkillRelationResponseCollection
  summary: String
  title: String!
  updatedAt: DateTime
}

type ProjectEntity {
  attributes: Project
  id: ID
}

type ProjectEntityResponse {
  data: ProjectEntity
}

type ProjectEntityResponseCollection {
  data: [ProjectEntity!]!
  meta: ResponseCollectionMeta!
}

input ProjectFiltersInput {
  and: [ProjectFiltersInput]
  content: StringFilterInput
  createdAt: DateTimeFilterInput
  github: ComponentUiButtonFiltersInput
  id: IDFilterInput
  live: ComponentUiButtonFiltersInput
  locale: StringFilterInput
  localizations: ProjectFiltersInput
  not: ProjectFiltersInput
  or: [ProjectFiltersInput]
  publishedAt: DateTimeFilterInput
  skills: SkillFiltersInput
  summary: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ProjectInput {
  content: String
  displayPicture: ID
  github: ComponentUiButtonInput
  live: ComponentUiButtonInput
  publishedAt: DateTime
  skills: [ID]
  summary: String
  title: String
}

type ProjectRelationResponseCollection {
  data: [ProjectEntity!]!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  about(locale: I18NLocaleCode, publicationState: PublicationState = LIVE): AboutEntityResponse
  getInContact(locale: I18NLocaleCode, publicationState: PublicationState = LIVE): GetInContactEntityResponse
  global(locale: I18NLocaleCode): GlobalEntityResponse
  heroSection(locale: I18NLocaleCode): HeroSectionEntityResponse
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  me: UsersPermissionsMe
  mypocketDisplay(locale: I18NLocaleCode, publicationState: PublicationState = LIVE): MypocketDisplayEntityResponse
  project(id: ID, locale: I18NLocaleCode): ProjectEntityResponse
  projects(filters: ProjectFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ProjectEntityResponseCollection
  skill(id: ID): SkillEntityResponse
  skills(filters: SkillFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): SkillEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

type Skill {
  createdAt: DateTime
  name: String!
  projects(filters: ProjectFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ProjectRelationResponseCollection
  updatedAt: DateTime
}

type SkillEntity {
  attributes: Skill
  id: ID
}

type SkillEntityResponse {
  data: SkillEntity
}

type SkillEntityResponseCollection {
  data: [SkillEntity!]!
  meta: ResponseCollectionMeta!
}

input SkillFiltersInput {
  and: [SkillFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: SkillFiltersInput
  or: [SkillFiltersInput]
  projects: ProjectFiltersInput
  updatedAt: DateTimeFilterInput
}

input SkillInput {
  name: String
  projects: [ID]
}

type SkillRelationResponseCollection {
  data: [SkillEntity!]!
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  size: Float
  url: String
  width: Int
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  provider: String
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  email: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  username: String
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}
